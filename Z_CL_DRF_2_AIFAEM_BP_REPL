class Z_CL_DRF_2_AIFAEM_BP_REPL definition
  public
  inheriting from CL_MDG_BS_BP_SUPER_DRF
  final
  create public .

public section.

*"* public components of class CL_MDG_BS_BP_REL_SERVICE_DRF
*"* do not include other source files here!!!
  interfaces IF_DRF_OUTBOUND .

  class-data GV_CURRENT_STATE type ABAP_BOOL .

  class-methods CLASS_CONSTRUCTOR .
PROTECTED SECTION.

  CONSTANTS gc_eternal_date TYPE bu_datto VALUE '99991231' ##NO_TEXT.
  " data MT_BP_SEND type BUS_EI_EXTERN_T .
  "data MS_RUNTIME_PARAM type DRF_S_RUNTIME_PARAMETER_EXT .
  "class-data SV_BUSINESS_OBJECT_NAME type MDG_OBJECT_TYPE_CODE_BS value 'MDGBP' ##NO_TEXT.
  "data MT_BUPA type MDG_BS_BP_T_EXTERN .
  "data MT_RELATION type MDG_BS_BP_REL_T_EXTERN .
  " data MT_REL_SEND type BURS_EI_EXTERN_T .
  "  constants SC_TT_DRF_BP type DRF_REL_OBJECT_TYPE value 'MDG_BS_BP_TT_DRF' ##NO_TEXT.
  " constants SC_S_DRF_BP type STRING value 'MDG_BS_BP_S_DRF' ##NO_TEXT.
  " constants SC_EXTRACTOR_CL_SUPPL type SEOCLSNAME value 'CL_MDG_IL_SUPPLIER' ##NO_TEXT.
  " constants SC_EXTRACTOR_CL_BP type SEOCLSNAME value 'CL_MDG_IL_BP' ##NO_TEXT.
  "data MT_BP_DRF type MDG_BS_BP_TT_DRF .
  "class-data SO_BP_ROLE_FILTER type ref to CL_DRF_FILTER_OBJECT .
  "constants MC_MSGID type SYMSGID value 'MDG_BS_BP_DATAREPL' ##NO_TEXT.
  "constants SC_CHGID_DELETE type CHAR1 value 'D' ##NO_TEXT.
  "data MV_COUNT_REL_SKIPPED type I .

  METHODS get_bp_bupa_outbound
    RETURNING
      VALUE(ro_bp_bupa_outbound) TYPE REF TO if_bs_bp_soa_service_impl_out .
  METHODS get_bp_relship_outbound
    RETURNING
      VALUE(ro_bp_relship_outbound) TYPE REF TO if_bs_bp_soa_service_impl_out .
PRIVATE SECTION.

  DATA go_drf_bp TYPE REF TO cl_mdg_bs_bp_rel_service_drf .
  DATA:
    gt_msg_link TYPE SORTED TABLE OF mdg_bs_bp_admin_message_data WITH UNIQUE KEY objkey .
  DATA mv_receiver_bskey TYPE mdg_extr_bskey .
  DATA mt_key_mapping TYPE mdg_bs_bp_tt_mapping_keys .

  METHODS raise_drf_exception
    IMPORTING
      !ir_exception TYPE REF TO cx_root
    RAISING
      cx_drf_exception .
  METHODS role_node_filter
    IMPORTING
      !it_external_criteria TYPE rsds_trange
      !iv_ignore_filter     TYPE abap_bool
    CHANGING
      !ct_bs_bp_extern      TYPE mdg_bs_bp_t_extern
    RAISING
      cx_drf_exception .
  METHODS same_rel_partner
    IMPORTING
      !is_relation             TYPE mdg_bs_bp_rel_s_extern
    RETURNING
      VALUE(rv_same_target_bp) TYPE abap_bool .
  METHODS get_bp_key_mapping
    IMPORTING
      !iv_partner     TYPE bu_partner
    EXPORTING
      !es_key_mapping TYPE mdg_bs_bp_s_mapping_keys .
  METHODS identification_node_filter
    IMPORTING
      !it_external_criteria TYPE rsds_trange
      !iv_ignore_filter     TYPE abap_bool
    CHANGING
      !ct_bs_bp_extern      TYPE mdg_bs_bp_t_extern
    RAISING
      cx_drf_exception .
  METHODS address_usage_node_filter
    IMPORTING
      !it_external_criteria TYPE rsds_trange
      !iv_ignore_filter     TYPE abap_bool
    CHANGING
      !ct_bs_bp_extern      TYPE mdg_bs_bp_t_extern
    RAISING
      cx_drf_exception .
  METHODS taxcat_node_filter
    IMPORTING
      !it_external_criteria TYPE rsds_trange
      !iv_ignore_filter     TYPE abap_bool
    CHANGING
      !ct_bs_bp_extern      TYPE mdg_bs_bp_t_extern
    RAISING
      cx_drf_exception .
ENDCLASS.



CLASS Z_CL_DRF_2_AIFAEM_BP_REPL IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method Z_CL_DRF_2_AIFAEM_BP_REPL=>CLASS_CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method CLASS_CONSTRUCTOR.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method Z_CL_DRF_2_AIFAEM_BP_REPL->GET_BP_BUPA_OUTBOUND
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RO_BP_BUPA_OUTBOUND            TYPE REF TO IF_BS_BP_SOA_SERVICE_IMPL_OUT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method GET_BP_BUPA_OUTBOUND.
     ro_bp_bupa_outbound = cl_bp_bupa_si_out=>new( ).
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method Z_CL_DRF_2_AIFAEM_BP_REPL->GET_BP_KEY_MAPPING
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PARTNER                     TYPE        BU_PARTNER
* | [<---] ES_KEY_MAPPING                 TYPE        MDG_BS_BP_S_MAPPING_KEYS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_bp_key_mapping.
    CONSTANTS:
      c_type_code_bp TYPE mdg_object_type_code_bs VALUE '147' ##NO_TEXT,
      BEGIN OF c_ids_code,
        bp_id     TYPE mdg_ids_type_code_bs VALUE '888' ##NO_TEXT,
        bp_ext_id TYPE mdg_ids_type_code_bs VALUE '988' ##NO_TEXT,
        bp_uuid   TYPE mdg_ids_type_code_bs VALUE '889' ##NO_TEXT,
      END OF c_ids_code.

    DATA:
      ls_receiver_key    LIKE LINE OF  es_key_mapping-receiver_key,
      ls_object_key      TYPE mdg_s_object_key_bs,
      lt_matching        TYPE mdg_s_get_matching_easy_bs,
      ls_matching_object TYPE mdg_s_matching_obj_data_bs.


    CHECK iv_partner IS NOT INITIAL AND ms_runtime_param-business_system IS NOT INITIAL.

    CLEAR es_key_mapping.
    READ TABLE mt_key_mapping INTO es_key_mapping WITH KEY partner_sender = iv_partner.
    CHECK sy-subrc <> 0.

    "Read key mapping for Business Partner
    TRY.
        CALL METHOD cl_mdg_id_matching_api_bs=>get_instance
          EXPORTING
            iv_direct_db_insert       = abap_false
            iv_set_lcl_system_by_api  = abap_false
          IMPORTING
            er_if_mdg_id_matching_api = DATA(lo_id_matching_api).
      CATCH cx_mdg_id_matching_bs
            cx_mdg_no_api_instance
            cx_mdg_lcl_bus_sys_not_found.
        RETURN.
    ENDTRY.

    ls_object_key-object_type_code                          = c_type_code_bp.
    ls_object_key-identifier_key-ident_defining_scheme_code = c_ids_code-bp_id.
    ls_object_key-identifier_key-business_system_id         = CONV mdg_fnd_business_system_id( cl_mdg_ca_get_own_bus_sys=>get_local_business_system( ) ).
    WRITE iv_partner TO ls_object_key-identifier_key-id_value.

    TRY.
        CALL METHOD lo_id_matching_api->get_matching
          EXPORTING
            is_search_key            = ls_object_key
            iv_target_system         = ms_runtime_param-business_system
          IMPORTING
            es_matching_objects_easy = lt_matching.
      CATCH cx_mdg_missing_input_parameter
            cx_mdg_missing_id_data
            cx_mdg_otc_idm_error
            cx_mdg_id_matching_bs
            cx_mdg_idsc_invalid.
        RETURN.
    ENDTRY.

    "Fill the mapping table that will later be stored in the service class
    es_key_mapping-partner_sender = iv_partner.
    LOOP AT lt_matching-matching_objects ASSIGNING FIELD-SYMBOL(<fs_foreign_objects>).
      CLEAR ls_receiver_key.
      ls_receiver_key-system_reference = <fs_foreign_objects>-system_reference.

      LOOP AT <fs_foreign_objects>-object_identifier INTO DATA(ls_object_identifier)
                                                    WHERE ident_defining_scheme_code EQ c_ids_code-bp_id
                                                       OR ident_defining_scheme_code EQ c_ids_code-bp_uuid
                                                       OR ident_defining_scheme_code EQ c_ids_code-bp_ext_id.
        CASE ls_object_identifier-ident_defining_scheme_code.
          WHEN c_ids_code-bp_id.
            MOVE ls_object_identifier-id_value TO ls_receiver_key-partner.
          WHEN c_ids_code-bp_uuid.
            TRY.
                cl_gdt_conversion=>guid_inbound( EXPORTING im_value  = ls_object_identifier-id_value
                                                 IMPORTING ex_guid_c = ls_receiver_key-partner_guid ).
              CATCH cx_gdt_conversion ##NO_HANDLER.
            ENDTRY.
          WHEN c_ids_code-bp_ext_id.
            MOVE ls_object_identifier-id_value TO ls_receiver_key-partner_external.
          WHEN OTHERS.
            CONTINUE.
        ENDCASE.
      ENDLOOP.

      IF sy-subrc NE 0.
        CONTINUE.
      ENDIF.

      APPEND ls_receiver_key TO es_key_mapping-receiver_key.
    ENDLOOP.

    INSERT es_key_mapping INTO TABLE mt_key_mapping.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method Z_CL_DRF_2_AIFAEM_BP_REPL->GET_BP_RELSHIP_OUTBOUND
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RO_BP_RELSHIP_OUTBOUND         TYPE REF TO IF_BS_BP_SOA_SERVICE_IMPL_OUT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_bp_relship_outbound.
    ro_bp_relship_outbound = cl_bp_relship_si_out=>new( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method Z_CL_DRF_2_AIFAEM_BP_REPL->IF_DRF_OUTBOUND~ANALYZE_CHANGES_BY_CHG_POINTER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_CHANGE_POINTER              TYPE        DRF_T_BDCP
* | [<---] ES_STAT_INFO                   TYPE        DRF_S_STAT_INFO
* | [<-->] CT_CHANGED_OBJECTS             TYPE        SORTED TABLE
* | [<-->] CT_DELETED_OBJECTS             TYPE        SORTED TABLE(optional)
* | [!CX!] CX_DRF_ANALYZE_CHANGES
* | [!CX!] CX_DRF_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method IF_DRF_OUTBOUND~ANALYZE_CHANGES_BY_CHG_POINTER.


  DATA: ls_bp_s_drf         TYPE mdg_bs_bp_s_drf,
        lv_relnr            TYPE bu_relnr,
        lt_change_pointer   TYPE drf_t_bdcp.

  FIELD-SYMBOLS: <lc_bdcp>  TYPE drf_s_bdcp.

  BREAK-POINT ID mdg_bs_bp_super_drf.
  IF it_change_pointer IS INITIAL.
    RETURN.
  ENDIF.

*  ms_runtime_param-bal->increase_msg_level(
*      iv_alsort      = 'ULA'
*      iv_description = 'ANALYZE_ALE_CHG_POINTER'
*      ).


  lt_change_pointer = it_change_pointer.
  SORT lt_change_pointer BY cretime DESCENDING.

* IF ms_runtime_param-parallel_active = abap_false .
  LOOP AT lt_change_pointer ASSIGNING <lc_bdcp>.
    CASE <lc_bdcp>-tabname.
      WHEN 'BUT050' OR 'BUT051' OR 'BUT053'.
        MOVE <lc_bdcp>-cdobjid(12)    TO lv_relnr.
        MOVE <lc_bdcp>-cdobjid+12(10) TO ls_bp_s_drf-relpartner1.
        MOVE <lc_bdcp>-cdobjid+22(10) TO ls_bp_s_drf-relpartner2.
        MOVE <lc_bdcp>-cdobjid+32(8)  TO ls_bp_s_drf-date_to.
        MOVE <lc_bdcp>-cdobjid+40(6)  TO ls_bp_s_drf-reltyp.
        MOVE <lc_bdcp>-cdchgid        TO ls_bp_s_drf-cdchgid.

        SELECT SINGLE dftval FROM but050  INTO ls_bp_s_drf-dftval
          WHERE relnr    = lv_relnr
            AND partner1 = ls_bp_s_drf-relpartner1
            AND partner2 = ls_bp_s_drf-relpartner2
            AND date_to  = ls_bp_s_drf-date_to .

      WHEN 'BUT000'.
        MOVE <lc_bdcp>-cdobjid TO ls_bp_s_drf-bp_header.

    ENDCASE.
    IF NOT ls_bp_s_drf IS INITIAL.
      INSERT ls_bp_s_drf INTO TABLE ct_changed_objects.
      CLEAR ls_bp_s_drf.
    ENDIF.
  ENDLOOP.



*************************************************************************
**  Return the changes sites.                                        *
*************************************************************************
*  ms_runtime_param-bal->decrease_msg_level(
**    is_stat_info = is_stat_info
*           ).
endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method Z_CL_DRF_2_AIFAEM_BP_REPL->IF_DRF_OUTBOUND~ANALYZE_CHANGES_BY_MDG_CP
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_CHANGE_POINTER              TYPE        MDG_CP_T_CP
* | [<---] ES_STAT_INFO                   TYPE        DRF_S_STAT_INFO
* | [<-->] CT_CHANGED_OBJECTS             TYPE        SORTED TABLE
* | [<-->] CT_DELETED_OBJECTS             TYPE        SORTED TABLE(optional)
* | [!CX!] CX_DRF_ANALYZE_CHANGES
* | [!CX!] CX_DRF_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method IF_DRF_OUTBOUND~ANALYZE_CHANGES_BY_MDG_CP.

 "*** Fill table CT_CHANGED_OBJECTS with object keys from table IT_CHANGE_POINTER
*** Implementation new with note 1717424

  DATA:
    ls_change_pointer  LIKE LINE OF it_change_pointer,
    lr_changed_obj     TYPE REF TO data.

  DATA lt_change_pointer TYPE mdg_cp_t_cp .

  FIELD-SYMBOLS:
    <changed_obj>      TYPE any.

  CHECK it_change_pointer[] IS NOT INITIAL.
  lt_change_pointer = it_change_pointer.
  SORT lt_change_pointer by valid_from ascending.

  " Constant me->sc_s_drf_bp contains name of key structure for the relevant BO type
  " defined in table MDGV_IDSTC_ATTR
  CREATE DATA lr_changed_obj TYPE (me->sc_s_drf_bp).
  ASSIGN lr_changed_obj->* TO <changed_obj>.

  " collect the object keys in the changing table parameter CT_CHANGED_OBJECTS
  LOOP AT lt_change_pointer INTO ls_change_pointer.
    <changed_obj> = ls_change_pointer-object_key.
    READ TABLE ct_changed_objects FROM <changed_obj> TRANSPORTING NO FIELDS.
    IF sy-subrc NE 0.
      INSERT <changed_obj> INTO TABLE ct_changed_objects.
    ELSE.
  " last change should win (in case delete/insert for same key is available)
       MODIFY ct_changed_objects INDEX sy-tabix FROM <changed_obj>.
    ENDIF.
  ENDLOOP.

  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method Z_CL_DRF_2_AIFAEM_BP_REPL->IF_DRF_OUTBOUND~APPLY_NODE_INST_FILTER_MULTI
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_EXTERNAL_CRITERIA           TYPE        RSDS_TRANGE
* | [--->] IT_FOBJ                        TYPE        DRF_T_FOBJ_IMPL
* | [--->] IV_IGNORE_FILTER               TYPE        ABAP_BOOL (default =' ')
* | [<-->] CT_RELEVANT_OBJECTS            TYPE        SORTED TABLE
* | [<-->] CT_DELETED_OBJECTS             TYPE        SORTED TABLE(optional)
* | [!CX!] CX_DRF_PROCESS_MESSAGES
* | [!CX!] CX_DRF_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method IF_DRF_OUTBOUND~APPLY_NODE_INST_FILTER_MULTI.

   "* Filter the data for the customized nodes

  DATA: lr_badi_supplier TYPE REF TO mdg_bs_supplier_si,
        lx_drf_exception TYPE REF TO cx_drf_exception.

  BREAK-POINT ID mdg_bs_bp_super_drf.

  TRY.
* perform the Node filter on the node ROLE
      CALL METHOD me->role_node_filter
        EXPORTING
          it_external_criteria = it_external_criteria
          iv_ignore_filter     = iv_ignore_filter
        CHANGING
          ct_bs_bp_extern      = mt_bupa.

* perform the Node filter on the node IDENTIFICATION
      CALL METHOD me->identification_node_filter
        EXPORTING
          it_external_criteria = it_external_criteria
          iv_ignore_filter     = iv_ignore_filter
        CHANGING
          ct_bs_bp_extern      = mt_bupa.

* perform the Node filter on the node ADDRESS USAGE
      CALL METHOD me->address_usage_node_filter
        EXPORTING
          it_external_criteria = it_external_criteria
          iv_ignore_filter     = iv_ignore_filter
        CHANGING
          ct_bs_bp_extern      = mt_bupa.

* perform the Node filter on the node Tax category in Identification
      CALL METHOD me->taxcat_node_filter
        EXPORTING
          it_external_criteria = it_external_criteria
          iv_ignore_filter     = iv_ignore_filter
        CHANGING
          ct_bs_bp_extern      = mt_bupa.

*  perform the Node filter in higher application layers
      GET BADI lr_badi_supplier.

      CALL BADI lr_badi_supplier->drf_node_filter
        EXPORTING
          iv_runtime_param     = ms_runtime_param
          iv_ignore_filter     = iv_ignore_filter
          it_external_criteria = it_external_criteria
        CHANGING
          ct_bs_bp_extern      = mt_bupa.

    CATCH cx_drf_exception INTO lx_drf_exception.
      RAISE EXCEPTION TYPE cx_drf_exception
        EXPORTING
          previous = lx_drf_exception.
  ENDTRY.

  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method Z_CL_DRF_2_AIFAEM_BP_REPL->IF_DRF_OUTBOUND~ENRICH_FILTER_CRITERIA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_EXTERNAL_CRITERIA           TYPE        RSDS_TRANGE
* | [<---] ET_ADD_EXTERNAL_CRITERIA       TYPE        RSDS_TRANGE
* | [<---] ES_STAT_INFO                   TYPE        DRF_S_STAT_INFO
* | [!CX!] CX_DRF_ENRICH_FILTER_PARAMETER
* | [!CX!] CX_DRF_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method IF_DRF_OUTBOUND~ENRICH_FILTER_CRITERIA.

 "*! Enrich filter criteria.
*
*  Evaluate replication mode
*
*  Replication can be triggered in various ways.
*
*  A replication triggered by a MDG change request is identified by
*  MS_RUNTIME_PARAM-USMD_CREQUEST. USMD_CREQUEST is the triggering
*  CR ID. The CR based replication does not provide IT_EXTERNAL_CRITERIA.
*  DRF itself executes a callback to the MDG layer to retrieve the object
*  list of the change request and use it as objects to be replicated in
*  method READ_COMPLETE_DATA.
*
*  In the past, MDG could ensure that a CR always contained all objects
*  including both all BPs and all BP Rels. Therefore this method simply
*  set current state to true. Unfortunately, recent enhancements of the
*  BP Web Service (e.g. reduced model scope, special handling for non
*  ECC systems, etc.) can create CRs that do not contain the all objects
*  anymore. The old assumption, that current state is true, is not valid
*  anymore. Since the current method does not get any information about
*  the objects to be replicated, it still assumes current state is true,
*  but the final value needs to be verified when reading the data to be
*  replicated in READ_COMPLETE_DATA.
*
*  For all other, common ways of replication, the current state can be
*  determined by evaluating the given filter (selection) criteria. The
*  information is used in method SEND_MESSAGE when calling
*  EXEC_ASYNC_OUT respectively later in class
*  CL_MDG_BPRELSHP_FND_MAPPING and method FILL_MESSAGE_HEADER.

  CONSTANTS:
    lc_only_bp TYPE mdg_bs_bp_sel_drf VALUE '1'.

  DATA:
    lv_current_state     TYPE abap_bool VALUE abap_true,
    ls_external_criteria LIKE LINE OF it_external_criteria,
    ls_bpsel             LIKE LINE OF ls_external_criteria-frange_t.

  BREAK-POINT ID mdg_bs_bp_super_drf.

  CLEAR gv_current_state.

  "Replication mode
  IF ms_runtime_param-usmd_crequest IS NOT INITIAL.
    "we still assume current state, but check later on
    "in READ_COMPLETE_DATA to ensure a valid value
    gv_current_state = abap_true.
    RETURN.
  ENDIF.

  "For non-CR based replication, check the given filter criteria
  LOOP AT it_external_criteria INTO ls_external_criteria.
    "Check if relationships are going to be sent at all
    READ TABLE ls_external_criteria-frange_t INTO ls_bpsel WITH KEY fieldname = 'BPSEL'.
    IF sy-subrc IS INITIAL.
      READ TABLE ls_bpsel-selopt_t TRANSPORTING NO FIELDS WITH KEY low = lc_only_bp.
      IF sy-subrc IS INITIAL.
        lv_current_state = abap_false.
        EXIT.
      ENDIF.
    ENDIF.
    "Current state should be sent if filter values have been provided
    "ONLY for criterium PARTNER. Otherwise replication should be
    "considered as (potentially) partial => no current state of
    "relationships
    LOOP AT ls_external_criteria-frange_t TRANSPORTING NO FIELDS
      WHERE fieldname NE 'PARTNER' AND fieldname NE 'BPSEL'.
      lv_current_state = abap_false.
      EXIT.
    ENDLOOP.
    IF lv_current_state = abap_false.
      EXIT.
    ENDIF.
  ENDLOOP.
  gv_current_state = lv_current_state.
 endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method Z_CL_DRF_2_AIFAEM_BP_REPL->IF_DRF_OUTBOUND~FINALIZE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_RELEVANT_OBJECTS            TYPE        SORTED TABLE
* | [--->] IT_ERRONEOUS_OBJECTS           TYPE        SORTED TABLE
* | [--->] IV_REPEATED_INITIAL_RUN        TYPE        BOOLE_D
* | [<---] EV_DELETE_CHANGE_POINTER       TYPE        BOOLE_D
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD if_drf_outbound~finalize.

   BREAK-POINT ID mdg_bs_bp_super_drf.

  CLEAR ev_delete_change_pointer.

* write a message how many relationship were be skipped
  IF mv_count_rel_skipped > 0.
    IF 1 = 0.
      MESSAGE i012(mdg_bs_bp_datarepl) WITH mv_count_rel_skipped.
    ENDIF.
    "&1 relationship(s) excluded from the BP replication
    ms_runtime_param-bal->add_msg_txt(
      EXPORTING
        iv_msgty     =  if_drf_const=>msg_type_info
        iv_msgno     =  '012'
        iv_msgid     =  mc_msgid
        iv_msgv1     =  mv_count_rel_skipped
    ).

    if 1 eq 2.
      message e012(MDG_BS_BP_DATAREPL) WITH '1'. "for message traceability
    endif.

  ENDIF.

  CALL METHOD me->end
    EXPORTING
      it_relevant_objects      = it_relevant_objects
      it_erroneous_objects     = it_erroneous_objects
      iv_repeated_initial_run  = iv_repeated_initial_run
    IMPORTING
      ev_delete_change_pointer = ev_delete_change_pointer.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method Z_CL_DRF_2_AIFAEM_BP_REPL=>IF_DRF_OUTBOUND~INITIALIZE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_RUNTIME_PARAM               TYPE        DRF_S_RUNTIME_PARAMETER_EXT
* | [<---] EO_IF_DRF_OUTBOUND             TYPE REF TO IF_DRF_OUTBOUND
* | [<---] ES_RUNTIME_PARAM_OUT_IMPL      TYPE        DRF_S_RUNTIME_PARAM_OUT_IMPL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD if_drf_outbound~initialize.

   DATA: ls_runtime_param  TYPE drf_s_runtime_param_out_impl,
        lr_drf_bp_serv    TYPE REF TO Z_CL_DRF_2_AIFAEM_BP_REPL.

  BREAK-POINT ID mdg_bs_bp_super_drf.
  CLEAR gv_current_state.


************************************************************************
* 1.) Create an instance of myself                                     *
*     Remember the runtime parameters for all subsequent methods       *
*     and pass it to the framework                                     *
************************************************************************

  TRY.
      CREATE OBJECT lr_drf_bp_serv.
    CATCH cx_sy_create_object_error.
      EXIT.
  ENDTRY.

  IF lr_drf_bp_serv IS BOUND.
    lr_drf_bp_serv->ms_runtime_param = is_runtime_param.
  ENDIF.


************************************************************************
* 2.) Set own runtime parameter                                        *
************************************************************************

  ls_runtime_param-table_type_name = SC_TT_DRF_BP. " e.g. MDG_BS_BP_TT_DRF
  es_runtime_param_out_impl =  ls_runtime_param .
*  es_runtime_param_out_impl-build_paral_pck_implemented = abap_true .
*  es_runtime_param_out_impl-SUPPRESS_APPLY_FILTER = 'X' .
  eo_if_drf_outbound = lr_drf_bp_serv .

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method Z_CL_DRF_2_AIFAEM_BP_REPL->IF_DRF_OUTBOUND~MAP_DATA2MESSAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IR_RELEVANT_OBJECT             TYPE REF TO DATA
* | [--->] IS_BUS_SYS_TECH                TYPE        MDG_S_BUS_SYS_TECH(optional)
* | [--->] IV_DEL_OBJECT                  TYPE        ABAP_BOOL(optional)
* | [!CX!] CX_DRF_PROCESS_MESSAGES
* | [!CX!] CX_DRF_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method IF_DRF_OUTBOUND~MAP_DATA2MESSAGE.



  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method Z_CL_DRF_2_AIFAEM_BP_REPL->IF_DRF_OUTBOUND~READ_COMPLETE_DATA
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CT_RELEVANT_OBJECTS            TYPE        SORTED TABLE
* | [!CX!] CX_DRF_PROCESS_MESSAGES
* | [!CX!] CX_DRF_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method IF_DRF_OUTBOUND~READ_COMPLETE_DATA.

*    go_drf_bp->IF_DRF_OUTBOUND~read_complete_data(
*      CHANGING
*        ct_relevant_objects =  ct_relevant_objects                " Object to Be Sent
*    ).
*    CATCH cx_drf_process_messages. " Send Exceptions during Service/Message
*    CATCH cx_drf_exception.        " Root Class for Exceptions

DATA:
    lo_extrct_obj             TYPE REF TO object,
    lo_extractor              TYPE REF TO cl_mdg_il_bp, "extractor of the super class
    dref_bp_t                 TYPE REF TO data, " e.g. mdg_bs_bp_tt_drf
    dref_bp_s                 TYPE REF TO data, " e.g. mdg_bs_bp_s_drf
    lt_messages               TYPE bapiret2_t,
    ls_message                TYPE bapiret2,
    lt_bp_data                TYPE mdg_bs_bp_t_extern,
    lt_rel_data               TYPE mdg_bs_bp_rel_t_extern,
    ls_rel_id                 TYPE bus_bupr_instance,
    lv_object_task            TYPE burs_ei_object_task,
    lv_last_block             TYPE flag,
    lv_bp_included            TYPE abap_bool,
    lx_sy_create_data_error   TYPE REF TO cx_sy_create_data_error,
    lx_sy_create_object_error TYPE REF TO cx_sy_create_object_error,
    lv_replication_relevant   TYPE abap_bool,
    lv_change_id              TYPE cdchngind,
    lv_object_id              TYPE drf_object_id,
    ls_mdg_drf_bp_rel_key     TYPE mdg_bs_bp_s_drf,
    lt_mdg_drf_bp_rel_keys    TYPE mdg_bs_bp_tt_drf,
    lv_replace_relevant_objs  TYPE abap_bool VALUE abap_false,
    lv_sy_tabix_help          TYPE sytabix,
    lt_bps                    TYPE bst_business_partners,
    lt_rels                   TYPE bus_bupr_instance_t,
    lv_foreign_system         TYPE sld_bskey,
    lv_own_id                 TYPE bu_partner,
    ls_key_mapping            TYPE mdg_bs_bp_s_mapping_keys,
    lt_foreign_objects        TYPE mdg_t_matching_obj_data_bs.

  FIELD-SYMBOLS:
    <fs_bp_t> TYPE SORTED TABLE,
    <fs_bp_s> TYPE any,
    <fs_comp> TYPE any,
    <lv_bp>   TYPE bu_partner.

  BREAK-POINT ID mdg_bs_bp_super_drf.

  "create extractor
  TRY.
      CREATE OBJECT lo_extrct_obj TYPE (sc_extractor_cl_suppl).
    CATCH cx_sy_create_object_error INTO lx_sy_create_object_error.
      TRY.
          CREATE OBJECT lo_extrct_obj TYPE (sc_extractor_cl_bp).
        CATCH cx_sy_create_object_error INTO lx_sy_create_object_error.
          RAISE EXCEPTION TYPE cx_drf_exception
            EXPORTING
              previous = lx_sy_create_object_error.
      ENDTRY.
  ENDTRY.
  TRY.
      lo_extractor ?= lo_extrct_obj.
    CATCH cx_sy_move_cast_error .  "class does not match to super
      RETURN.
  ENDTRY.

  "create DRF structure and table for passed relevant objects
  TRY.
      "working attribute structure, includes key and attributes
      CREATE DATA dref_bp_s    TYPE (sc_s_drf_bp).
      ASSIGN      dref_bp_s->* TO <fs_bp_s>.
      "table
      CREATE DATA dref_bp_t    TYPE (sc_tt_drf_bp).
      ASSIGN      dref_bp_t->* TO   <fs_bp_t>.
    CATCH cx_sy_create_data_error INTO lx_sy_create_data_error.
      RAISE EXCEPTION TYPE cx_drf_exception
        EXPORTING
          previous = lx_sy_create_data_error.
  ENDTRY.
  IF <fs_bp_t> IS NOT ASSIGNED.
    RETURN.
  ENDIF.

  "load ids into the extractor
  ASSIGN ct_relevant_objects TO <fs_bp_t>.
  lv_bp_included = abap_false.
  LOOP AT <fs_bp_t> ASSIGNING <fs_bp_s>.
    CLEAR ls_mdg_drf_bp_rel_key.
    lv_sy_tabix_help = sy-tabix.

    ASSIGN COMPONENT 'BP_HEADER' OF STRUCTURE <fs_bp_s> TO <fs_comp>.
    IF sy-subrc = 0 AND
       <fs_comp> IS ASSIGNED AND
       NOT <fs_comp> IS INITIAL.
      lv_bp_included = abap_true.
      lo_extractor->add_id( <fs_comp> ).
      "remove changepointer entry (is not needed in this case)
      ASSIGN COMPONENT 'CDCHGID' OF STRUCTURE <fs_bp_s> TO <fs_comp>.
      IF <fs_comp> <> sc_chgid_delete.  "needed for deletion of single relations
        CLEAR  <fs_comp>.
      ENDIF.
      INSERT <fs_bp_s> INTO TABLE lt_mdg_drf_bp_rel_keys.

      "save key, otherwise send message will fail
      MOVE-CORRESPONDING <fs_bp_s> TO ls_mdg_drf_bp_rel_key.
      CLEAR ls_rel_id.
      ls_rel_id-partner1 = ls_mdg_drf_bp_rel_key-relpartner1.
      ls_rel_id-partner2 = ls_mdg_drf_bp_rel_key-relpartner2.
      ls_rel_id-relat_category = ls_mdg_drf_bp_rel_key-reltyp.
      ls_rel_id-date_to = ls_mdg_drf_bp_rel_key-date_to.
      ls_rel_id-difftypevalue = ls_mdg_drf_bp_rel_key-dftval.

      IF ls_rel_id IS NOT INITIAL.
        lo_extractor->add_rel_key( EXPORTING is_rel_key     =  ls_rel_id
                                             iv_object_task =  lv_object_task ).
      ENDIF.
      CONTINUE. " no more data in this loop pass expected
    ENDIF.

    ASSIGN COMPONENT 'RELPARTNER1' OF STRUCTURE <fs_bp_s> TO <fs_comp>.
    IF sy-subrc = 0 AND
       <fs_comp> IS ASSIGNED AND
       NOT <fs_comp> IS INITIAL.

      ls_rel_id-partner1 = <fs_comp>.
      ls_mdg_drf_bp_rel_key-relpartner1 = <fs_comp>.
    ENDIF.

    ASSIGN COMPONENT 'RELPARTNER2' OF STRUCTURE <fs_bp_s> TO <fs_comp>.
    IF sy-subrc = 0 AND
       <fs_comp> IS ASSIGNED AND
       NOT <fs_comp> IS INITIAL.
      ls_rel_id-partner2 = <fs_comp>.
      ls_mdg_drf_bp_rel_key-relpartner2 = <fs_comp>.
    ENDIF.

    ASSIGN COMPONENT 'RELTYP' OF STRUCTURE <fs_bp_s> TO <fs_comp>.
    IF sy-subrc = 0 AND
       <fs_comp> IS ASSIGNED AND
       NOT <fs_comp> IS INITIAL.
      ls_rel_id-relat_category = <fs_comp>.
      ls_mdg_drf_bp_rel_key-reltyp = <fs_comp>.
    ENDIF.

    ASSIGN COMPONENT 'DATE_TO' OF STRUCTURE <fs_bp_s> TO <fs_comp>.
    IF sy-subrc = 0 AND
       <fs_comp> IS ASSIGNED.
      IF NOT <fs_comp> IS INITIAL.
        ls_rel_id-date_to = <fs_comp>.
        ls_mdg_drf_bp_rel_key-date_to = <fs_comp>.
      ELSE.
        ls_mdg_drf_bp_rel_key-date_to = gc_eternal_date.
        lv_replace_relevant_objs = abap_true.
        ls_rel_id-date_to = gc_eternal_date.
      ENDIF.
    ENDIF.

    ASSIGN COMPONENT 'DFTVAL' OF STRUCTURE <fs_bp_s> TO <fs_comp>.
    IF sy-subrc = 0 AND
       <fs_comp> IS ASSIGNED AND
       NOT <fs_comp> IS INITIAL.
      ls_rel_id-difftypevalue = <fs_comp>.
      ls_mdg_drf_bp_rel_key-dftval = <fs_comp>.
    ENDIF.

    ASSIGN COMPONENT 'CDCHGID' OF STRUCTURE <fs_bp_s> TO <fs_comp>.
    IF sy-subrc = 0 AND <fs_comp> IS ASSIGNED.
      lv_change_id = <fs_comp>.
      CLEAR <fs_comp>.

      IF lv_change_id = sc_chgid_delete OR lv_change_id = 'E'.
        lv_object_id = ls_mdg_drf_bp_rel_key.
        CALL METHOD cl_drf_replication_status=>rep_sta_by_bo_inst_system_get
          EXPORTING
            iv_business_system      = ms_runtime_param-business_system
            iv_bo                   = sc_bo_bp_rel_ctrl
            iv_object_id            = lv_object_id
          IMPORTING
            ev_replication_relevant = lv_replication_relevant.
        IF lv_replication_relevant = abap_true.
          lv_object_task = sc_chgid_delete.
          INSERT ls_mdg_drf_bp_rel_key INTO TABLE lt_mdg_drf_bp_rel_keys.
          gv_current_state = abap_false.
        ELSE.
          MOVE ls_mdg_drf_bp_rel_key-relpartner1 TO lv_own_id.
          me->get_bp_key_mapping(
            EXPORTING
              iv_partner     = lv_own_id    " Business Partner Number
            IMPORTING
              es_key_mapping = ls_key_mapping ).

          IF ls_key_mapping IS NOT INITIAL.
            CLEAR:ls_key_mapping.
            MOVE ls_mdg_drf_bp_rel_key-relpartner2 TO lv_own_id.
            me->get_bp_key_mapping(
              EXPORTING
                iv_partner     = lv_own_id    " Business Partner Number
              IMPORTING
                es_key_mapping = ls_key_mapping ).

            IF ls_key_mapping IS INITIAL.
              mv_count_rel_skipped = mv_count_rel_skipped + 1.
              DELETE <fs_bp_t> INDEX lv_sy_tabix_help.
              CLEAR ls_rel_id.
            ELSE.
              lv_object_task = sc_chgid_delete.
              INSERT ls_mdg_drf_bp_rel_key INTO TABLE lt_mdg_drf_bp_rel_keys.
              gv_current_state = abap_false.
            ENDIF.
          ENDIF.
        ENDIF.
      ELSE.
        INSERT ls_mdg_drf_bp_rel_key INTO TABLE lt_mdg_drf_bp_rel_keys.
      ENDIF.
    ENDIF.

    IF ls_rel_id IS NOT INITIAL.
      lo_extractor->add_rel_key( EXPORTING is_rel_key     =  ls_rel_id
                                           iv_object_task =  lv_object_task ).
    ENDIF.
    CLEAR: ls_rel_id, lv_object_task.
  ENDLOOP.

  IF lv_replace_relevant_objs EQ abap_true.
    CLEAR ct_relevant_objects.
    INSERT LINES OF lt_mdg_drf_bp_rel_keys INTO TABLE ct_relevant_objects.
  ENDIF.

  "check the selection
  lt_bps = lo_extractor->get_idlist( ).
  lt_rels = lo_extractor->get_rel_keys( ).
  IF lt_bps IS INITIAL AND
     lt_rels IS INITIAL.
    RETURN. " structure doesn't contain any BP ID or REL ID
  ENDIF.

  "process BPs by blocks (of 100 otherwise call lo_extractor->SET_BLOCKSIZE before)
  WHILE lv_last_block = abap_false.
    "extract data
    lo_extractor->extract_next( IMPORTING et_message = lt_messages
                                   et_bs_bp_data     = lt_bp_data
                                   et_bs_bp_rel_data = lt_rel_data
                                   ev_is_last_block  = lv_last_block ).

    "add messages to runtime
    LOOP AT lt_messages INTO ls_message.
      CALL METHOD ms_runtime_param-bal->add_msg
        EXPORTING
          iv_msgty = ls_message-type
          iv_msgno = ls_message-number
          iv_msgid = ls_message-id
          iv_msgv1 = ls_message-message_v1
          iv_msgv2 = ls_message-message_v2
          iv_msgv3 = ls_message-message_v3
          iv_msgv4 = ls_message-message_v4.
    ENDLOOP.

    "store also the BP & Relationship data for further processing e.g. segment filtering
    APPEND LINES OF lt_bp_data  TO me->mt_bupa.
    APPEND LINES OF lt_rel_data TO me->mt_relation.

    CLEAR: lt_bp_data, lt_rel_data, lt_messages.
  ENDWHILE. " end of extraction

  "check the current state of BP Rels in CR based replication
  IF ms_runtime_param-usmd_crequest IS NOT INITIAL
    AND gv_current_state = abap_true
    AND lv_bp_included = abap_false.
    "there was no BP in the object list -> current state cannot be true!
    gv_current_state = abap_false.
  ENDIF.

  " Prevent deletion of relations in pooled mode
  IF ms_runtime_param-usmd_crequest IS  INITIAL
    AND gv_current_state = abap_true
    AND ms_runtime_param-dlmod = if_drf_const=>mode_change.
      gv_current_state = abap_false.
  ENDIF.

  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method Z_CL_DRF_2_AIFAEM_BP_REPL->IF_DRF_OUTBOUND~SEND_MESSAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_FILE_INFO                   TYPE        DRF_S_FILE_INFO(optional)
* | [--->] IV_OBJECT_COUNT                TYPE        DRF_PACKAGE_SIZE(optional)
* | [--->] IS_BUS_SYS_TECH                TYPE        MDG_S_BUS_SYS_TECH(optional)
* | [--->] IV_SKIP_AUTH                   TYPE        BOOLEAN(optional)
* | [<---] ET_FILE_DATA                   TYPE        DRF_T_FILE_OI_CONTENT
* | [<---] ET_MESSAGE                     TYPE        DRF_T_MESSAGE
* | [<-->] CT_OBJ_REP_STA                 TYPE        DRF_T_OBJ_REP_STA_FULL(optional)
* | [!CX!] CX_DRF_PROCESS_MESSAGES
* | [!CX!] CX_DRF_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD if_drf_outbound~send_message.

    DATA lo_bp_bupa_outbound       TYPE REF TO if_bs_bp_soa_service_impl_out.
    DATA lo_bp_relship_outbound    TYPE REF TO if_bs_bp_soa_service_impl_out.
    DATA lt_bs_bp_data             TYPE mdg_bs_bp_t_extern.
    DATA ls_bp_s_drf_check_bp      TYPE mdg_bs_bp_s_drf.
    DATA lt_bs_bp_data_copy        TYPE mdg_bs_bp_t_extern.
    DATA lt_bs_bp_rel_data         TYPE mdg_bs_bp_rel_t_extern.
    DATA lv_xi_msg_guid            TYPE sysuuid_x.
    DATA ls_bp_s_drf               TYPE mdg_bs_bp_s_drf.
    DATA lv_object_count           TYPE int4.
    DATA ls_msg_link               TYPE mdg_bs_bp_admin_message_data.
    DATA lv_send_allowed           TYPE abap_bool.
    DATA ls_key_mapping            TYPE mdg_bs_bp_s_mapping_keys.
    DATA lt_key_mapping            TYPE mdg_bs_bp_tt_mapping_keys.
    DATA lv_lines                  TYPE i.
    DATA lx_ai_system_fault        TYPE REF TO cx_ai_system_fault.
    DATA lv_bulk_message_id        TYPE mdg_fnd_bus_doc_msg_id_content.
    DATA ls_obj_rep_sta            TYPE drf_s_obj_rep_sta_attr.
    DATA ls_bupa                   TYPE mdg_bs_bp_s_extern.
    DATA ls_relation               TYPE mdg_bs_bp_rel_s_extern.
    DATA lt_relation               TYPE mdg_bs_bp_rel_t_extern.
    DATA lv_obj_rep_index          TYPE i.
    DATA ls_message                TYPE drf_s_message.
    DATA lv_own_id                 TYPE bu_partner.
    DATA lt_msg_link               TYPE SORTED TABLE OF mdg_bs_bp_admin_message_data WITH UNIQUE KEY objkey .

    DATA ls_aifaem_raw TYPE mdg_bp_bpsuitebulk_rplct_req_m.

    FIELD-SYMBOLS <ls_obj_rep_sta>          TYPE drf_s_obj_rep_sta_attr.
    FIELD-SYMBOLS <fs_bs_bp_data>           TYPE mdg_bs_bp_s_extern.
    FIELD-SYMBOLS <ls_message>              TYPE mdg_bs_bp_s_extern.
    FIELD-SYMBOLS <ls_relation_message>     TYPE mdg_bs_bp_rel_s_extern.


    CLEAR: et_file_data.

    BREAK-POINT ID mdg_bs_bp_super_drf.

* check if receiver system is customized as time independent (in this case no invalid records
* must be replicated)
    DATA ls_mdg_bus_sys_attr      TYPE mdg_bus_sys_attr.
    DATA: lv_latest_soap_id TYPE srtm_message_id.
    SELECT SINGLE * FROM mdg_bus_sys_attr INTO ls_mdg_bus_sys_attr
             WHERE business_system = ms_runtime_param-business_system
             AND   business_object = '1405'  "relations
             AND   comm_channel = '1'  "SOA
             AND   time_dependency = '1'.  "not time dependent

    LOOP AT ct_obj_rep_sta INTO ls_obj_rep_sta.

      lv_obj_rep_index = sy-tabix.
      MOVE ls_obj_rep_sta-object_id TO ls_bp_s_drf.         "#EC ENHOK
      IF ls_bp_s_drf-bp_header IS NOT INITIAL.

        READ TABLE mt_bupa INTO ls_bupa WITH KEY partner-header-object_instance-bpartner = ls_bp_s_drf-bp_header .
        IF sy-subrc = 0.
          READ TABLE lt_bs_bp_data TRANSPORTING NO FIELDS
                                   WITH KEY partner = ls_bupa-partner.
          IF sy-subrc <> 0.
            IF cl_mdg_bs_msg_pend_db=>get( )->is_object_pending(
                iv_own_oitc      = if_mdg_idsc_const=>bpartner_nr
                iv_own_object_id = |{ ls_bupa-partner-header-object_instance-bpartner ALPHA = OUT }| ) EQ abap_false
              OR me->ms_runtime_param-dlmod = if_drf_const=>mode_adhoc. "firefighting via manual DRFOUT based replication
              APPEND ls_bupa TO lt_bs_bp_data.
            ELSE.
              ls_obj_rep_sta-repstatus = if_drf_const=>replication_status_to_be_send.
              MODIFY ct_obj_rep_sta FROM ls_obj_rep_sta.

              cl_mdg_bs_msg_pend_db=>get( )->get_latest_by_own_object_id( EXPORTING iv_own_oitc = if_mdg_idsc_const=>bpartner_nr
                                                                                    iv_own_object_id   = |{ ls_bupa-partner-header-object_instance-bpartner ALPHA = OUT }|
                                                                          IMPORTING ev_soap_message_id = lv_latest_soap_id ).

              MESSAGE w071(mdg_bs_bp_datarepl) WITH |{ ls_bupa-partner-header-object_instance-bpartner ALPHA = OUT }| lv_latest_soap_id
               INTO DATA(lv_dummy).
              ms_runtime_param-bal->add_msg_sy( ).

              TRY.
                  cl_mdg_bs_msg_pend_db=>get( )->restart_message(
                    EXPORTING
                      iv_own_oitc      = if_mdg_idsc_const=>bpartner_nr
                      iv_own_object_id = |{ ls_bupa-partner-header-object_instance-bpartner ALPHA = OUT }|
                  ).
                CATCH cx_wsm_access_authority cx_wsm_access_monitor cx_soap_area_seq INTO DATA(lx_restart).
                  "failed restart can be ingnored
              ENDTRY.
            ENDIF.
          ENDIF.

          "return message data to DRF controller
          IF ms_runtime_param-return_message EQ abap_true.
            ls_message-bo_type = if_mdg_otc_const=>bpartner.
            ls_message-bo_key = ls_bp_s_drf-bp_header.
            ls_message-target_system = ms_runtime_param-business_system.

            CREATE DATA ls_message-message TYPE mdg_bs_bp_s_extern.
            ASSIGN ls_message-message->* TO <ls_message> CASTING.
            <ls_message> = ls_bupa.
            APPEND ls_message TO et_message.
          ENDIF.
        ENDIF.
      ENDIF.
      IF ls_bp_s_drf-relpartner1 IS NOT INITIAL.
        "Check if Relationship has been already sent
        READ TABLE gt_msg_link INTO ls_msg_link WITH KEY objkey = ls_obj_rep_sta-object_id ##WARN_OK .
        IF sy-subrc EQ 0.
          "Update Status and continue with next record
          READ TABLE ct_obj_rep_sta INDEX lv_obj_rep_index ASSIGNING <ls_obj_rep_sta>.
          <ls_obj_rep_sta>-msg_link  = ls_msg_link-msg_link.
          <ls_obj_rep_sta>-repstatus = if_drf_const=>replication_status_sent.
          CONTINUE.
        ENDIF.
        "Check if relationship has been already checked and passed for process
        READ TABLE lt_bs_bp_rel_data TRANSPORTING NO FIELDS WITH KEY
          partner_relation-header-object_instance-partner1-bpartner = ls_bp_s_drf-relpartner1
          partner_relation-header-object_instance-partner2-bpartner = ls_bp_s_drf-relpartner2
          partner_relation-header-object_instance-relat_category    = ls_bp_s_drf-reltyp
          partner_relation-header-object_instance-date_to           = ls_bp_s_drf-date_to
          partner_relation-header-object_instance-difftypevalue     = ls_bp_s_drf-dftval.
        IF sy-subrc IS INITIAL.
          CONTINUE.
        ENDIF.
        IF ls_bp_s_drf-date_to IS INITIAL.
          ls_bp_s_drf-date_to = gc_eternal_date.
        ENDIF.

* in case of time independent target send only valid records (except deletions)
        IF  NOT ls_mdg_bus_sys_attr IS INITIAL
        AND ls_bp_s_drf-cdchgid <> sc_chgid_delete
        AND NOT ls_bp_s_drf-date_to IS INITIAL
        AND ls_bp_s_drf-date_to LT sy-datlo.
          mv_count_rel_skipped = mv_count_rel_skipped + 1.
          DELETE ct_obj_rep_sta INDEX lv_obj_rep_index.
          DELETE mt_relation WHERE partner_relation-header-object_instance-partner1-bpartner = ls_bp_s_drf-relpartner1
                             AND   partner_relation-header-object_instance-partner2-bpartner = ls_bp_s_drf-relpartner2
                             AND   partner_relation-header-object_instance-relat_category    = ls_bp_s_drf-reltyp
                             AND   partner_relation-header-object_instance-date_to           = ls_bp_s_drf-date_to
                             AND   partner_relation-header-object_instance-difftypevalue     = ls_bp_s_drf-dftval.
          CONTINUE.
        ENDIF.

        IF gv_current_state = abap_true.
          "send all relationships read for the partner, to ensure
          "consistency at client side (see CL_MDG_BP_RELSHIP_SI_IN->PROCESS_TD_INBOUND)
          READ TABLE lt_relation TRANSPORTING NO FIELDS
            WITH KEY partner_relation-header-object_instance-partner1-bpartner = ls_bp_s_drf-relpartner1.
          IF sy-subrc NE 0.
            REFRESH lt_relation.
            LOOP AT mt_relation INTO ls_relation
              WHERE partner_relation-header-object_instance-partner1-bpartner = ls_bp_s_drf-relpartner1.
              INSERT ls_relation INTO TABLE lt_relation.
              DELETE mt_relation.  "avoid double replications
            ENDLOOP.
          ENDIF.
        ELSE.
          "send only the passed(selected) relationship
          READ TABLE mt_relation INTO ls_relation
                WITH KEY  partner_relation-header-object_instance-partner1-bpartner = ls_bp_s_drf-relpartner1
                          partner_relation-header-object_instance-partner2-bpartner = ls_bp_s_drf-relpartner2
                          partner_relation-header-object_instance-relat_category    = ls_bp_s_drf-reltyp
                          partner_relation-header-object_instance-date_to           = ls_bp_s_drf-date_to
                          partner_relation-header-object_instance-difftypevalue     = ls_bp_s_drf-dftval.
          IF sy-subrc = 0.
            DELETE mt_relation INDEX sy-tabix.
            IF ls_bp_s_drf-cdchgid = sc_chgid_delete.
              ls_relation-partner_relation-header-object_task = ls_bp_s_drf-cdchgid.
            ENDIF.
            INSERT ls_relation INTO TABLE lt_relation.
          ELSEIF ls_bp_s_drf-cdchgid = sc_chgid_delete.  "DRF-manual deletions have no entries in mt_relation
            ls_relation-partner_relation-header-object_instance-partner1-bpartner = ls_bp_s_drf-relpartner1.
            ls_relation-partner_relation-header-object_instance-partner2-bpartner = ls_bp_s_drf-relpartner2.
            ls_relation-partner_relation-header-object_instance-relat_category    = ls_bp_s_drf-reltyp.
            ls_relation-partner_relation-header-object_instance-date_to           = ls_bp_s_drf-date_to.
            ls_relation-partner_relation-header-object_instance-difftypevalue     = ls_bp_s_drf-dftval.
            ls_relation-partner_relation-header-object_task                       = ls_bp_s_drf-cdchgid.
            INSERT ls_relation INTO TABLE lt_relation.
          ENDIF.
        ENDIF.

        LOOP AT lt_relation INTO ls_relation.

* in case of time independent target send only valid records (except deletions)
          IF  NOT ls_mdg_bus_sys_attr IS INITIAL.
            IF ls_relation-partner_relation-header-object_instance-date_to LT sy-datlo
            OR ls_relation-partner_relation-central_data-main-data-date_from GT sy-datlo.
              mv_count_rel_skipped = mv_count_rel_skipped + 1.
              DELETE ct_obj_rep_sta INDEX lv_obj_rep_index.
              CONTINUE.
            ENDIF.
          ENDIF.

          "message shall be sent
          IF ms_runtime_param-return_message EQ abap_false.
            "Check if partner will be in the target system
            "PARTNER 1
            ls_bp_s_drf_check_bp-bp_header = ls_bp_s_drf-relpartner1.
            READ TABLE ct_obj_rep_sta  WITH KEY object_id = ls_bp_s_drf_check_bp TRANSPORTING NO FIELDS. "#EC ENHOK
                                                            "#EC WARNOK
            IF sy-subrc NE 0. " partner will no be send in this loop pass
              me->check_bp_send(
                EXPORTING
                  iv_business_system = ms_runtime_param-business_system
                  iv_partner         = ls_bp_s_drf-relpartner1
                IMPORTING
                  ev_send_allowed    = lv_send_allowed ).
              IF lv_send_allowed = abap_false.
                MOVE ls_bp_s_drf-relpartner1 TO lv_own_id.
                me->get_bp_key_mapping(
                  EXPORTING
                    iv_partner     = lv_own_id    " Business Partner Number
                  IMPORTING
                    es_key_mapping = ls_key_mapping ).
                IF ls_key_mapping IS INITIAL.
                  mv_count_rel_skipped = mv_count_rel_skipped + 1.
                  DELETE ct_obj_rep_sta INDEX lv_obj_rep_index.
                  CONTINUE.
                ENDIF.
              ENDIF.
            ENDIF.

            CLEAR ls_bp_s_drf_check_bp.
            "PARTNER 2
            ls_bp_s_drf_check_bp-bp_header = ls_bp_s_drf-relpartner2.
            READ TABLE ct_obj_rep_sta  WITH KEY object_id = ls_bp_s_drf_check_bp TRANSPORTING NO FIELDS. "#EC ENHOK
                                                            "#EC WARNOK
            IF sy-subrc NE 0.
              me->check_bp_send(
                EXPORTING
                  iv_business_system = ms_runtime_param-business_system
                  iv_partner         = ls_bp_s_drf-relpartner2
                IMPORTING
                  ev_send_allowed    = lv_send_allowed ).

              IF lv_send_allowed = abap_false.
                "Read key mapping for Business Partner
*              MOVE ls_bp_s_drf-relpartner1 TO lv_own_id.
*              me->get_bp_key_mapping(
*                EXPORTING
*                  iv_partner     = lv_own_id    " Business Partner Number
*                IMPORTING
*                  es_key_mapping = ls_key_mapping ).
*
                IF ls_key_mapping IS NOT INITIAL.
                  CLEAR:ls_key_mapping.
                  MOVE ls_bp_s_drf-relpartner2 TO lv_own_id.
                  me->get_bp_key_mapping(
                    EXPORTING
                      iv_partner     = lv_own_id    " Business Partner Number
                    IMPORTING
                      es_key_mapping = ls_key_mapping ).

                  IF ls_key_mapping IS INITIAL.
                    mv_count_rel_skipped = mv_count_rel_skipped + 1.
                    DELETE ct_obj_rep_sta INDEX lv_obj_rep_index.
                    CONTINUE. " -> relationship is not added to the replication list
                  ENDIF.
                ENDIF.
              ENDIF. " --> relationship can be sent
            ENDIF.

            "it can happens that the related partners point to the same partner
            "in the target system. Thus the rel. shouldn't be sent out, to prevent errors
            IF me->same_rel_partner( ls_relation ) = abap_true.
              mv_count_rel_skipped = mv_count_rel_skipped + 1.
              DELETE ct_obj_rep_sta INDEX lv_obj_rep_index.
              CONTINUE.
            ENDIF.

            "Do not send relation if partner1 or partner2 is pending but deletes have to be send allways
            IF ls_relation-partner_relation-header-object_task NE sc_chgid_delete AND
            (    cl_mdg_bs_msg_pend_db=>get( )->is_object_pending(
                   iv_own_oitc      = if_mdg_idsc_const=>bpartner_nr
                   iv_own_object_id = |{ ls_relation-partner_relation-header-object_instance-partner1-bpartner ALPHA = OUT }| )
                 EQ abap_true
              OR cl_mdg_bs_msg_pend_db=>get( )->is_object_pending(
                   iv_own_oitc      = if_mdg_idsc_const=>bpartner_nr
                   iv_own_object_id = |{ ls_relation-partner_relation-header-object_instance-partner2-bpartner ALPHA = OUT }| )
                 EQ abap_true
            ).
              mv_count_rel_skipped = mv_count_rel_skipped + 1.
              DELETE ct_obj_rep_sta INDEX lv_obj_rep_index.
              CONTINUE.
            ENDIF.

          ELSE. "return message data to DRF controller
            ls_message-bo_type = if_mdg_otc_const=>bpartner_relationship. "1405
            ls_message-bo_key = ls_obj_rep_sta-object_id.
            ls_message-target_system = ms_runtime_param-business_system.

            CREATE DATA ls_message-message TYPE mdg_bs_bp_rel_s_extern.
            ASSIGN ls_message-message->* TO <ls_relation_message> CASTING.
            <ls_relation_message> = ls_relation.
            APPEND ls_message TO et_message.
          ENDIF.
          APPEND ls_relation TO lt_bs_bp_rel_data.
        ENDLOOP.
        REFRESH lt_relation.

      ENDIF. " BP or relationship replication

      CLEAR ls_bp_s_drf.
    ENDLOOP.


    MOVE ms_runtime_param-business_system TO mv_receiver_bskey.

    TRY.
        "Send business partners
        IF NOT lt_bs_bp_data IS INITIAL.
          DELETE ADJACENT DUPLICATES FROM lt_bs_bp_data.
          lo_bp_bupa_outbound = get_bp_bupa_outbound( ).
          "A Business Partner in the sender system can correspond to more than one BP in
          "the receiver system. In this case we must send a separate message for each BP
          "in the receiver system.
          lt_bs_bp_data_copy[] = lt_bs_bp_data[].
          "Loop at the Business Partner table
          LOOP AT lt_bs_bp_data_copy ASSIGNING <fs_bs_bp_data>.
            me->get_bp_key_mapping(
              EXPORTING
                iv_partner     = <fs_bs_bp_data>-partner-header-object_instance-bpartner    " Business Partner Number
              IMPORTING
                es_key_mapping = ls_key_mapping ).   " Combining source key with appendant target keys
            INSERT ls_key_mapping INTO TABLE lt_key_mapping.
            "Extend Business Partner table
            CLEAR lv_lines.
            lv_lines = lines( ls_key_mapping-receiver_key ).
            SUBTRACT 1 FROM lv_lines.
            CHECK lv_lines > 0.
            DO lv_lines TIMES.
              APPEND <fs_bs_bp_data> TO lt_bs_bp_data.
            ENDDO.
          ENDLOOP.

          "Store key mapping of BP in the service class
          lo_bp_bupa_outbound->set_map_keys_for_bp( EXPORTING matching_bp = lt_key_mapping ).
          "Set the recipient system to support receiver-dependent code list
          "determination and value mapping
          lo_bp_bupa_outbound->set_recipient( mv_receiver_bskey ).

          "Execute service if direct send is requested (no return of message data requested)
          IF ms_runtime_param-return_message EQ abap_false.
            "Replaced Proxy Call by AIF XML Enabler Call
            "lo_bp_bupa_outbound->exec_async_out( EXPORTING api_out = REF #( lt_bs_bp_data ) ).

            DATA lo_mapper TYPE REF TO cl_mdg_bp_bupa_si_out.
            DATA ls_data TYPE mdg_bp_bpsuitebulk_rplct_req_m.
            DATA lr_bp_data_out    TYPE REF TO data.
            CREATE OBJECT lo_mapper.

            lo_mapper->do_mapping_outbound(
              EXPORTING
                i_api_out = lt_bs_bp_data
              IMPORTING
                er_xi_out = lr_bp_data_out
            ).

            ASSIGN lr_bp_data_out->* TO FIELD-SYMBOL(<bp_data_out>).

            IF <bp_data_out> IS ASSIGNED.
              ls_aifaem_raw = <bp_data_out>.
            ELSE.
              "TBD Error
            ENDIF.


            TRY.
                CALL METHOD /aif/cl_enabler_xml=>transfer_to_aif
                  EXPORTING
                    is_any_structure = ls_aifaem_raw
                    iv_queue_ns      = 'AEM'
                    iv_queue_name    = '001'.

              CATCH cx_root INTO DATA(lx_root).
                MESSAGE lx_root->get_text( ) TYPE 'E'.
            ENDTRY.

          ENDIF.

          lv_bulk_message_id = lo_bp_bupa_outbound->get_bulk_message_id( ).




          "Fill Object Replication Status
          CLEAR lv_object_count.
          lv_xi_msg_guid = lo_bp_bupa_outbound->get_xi_msg_guid( ).
          LOOP AT ct_obj_rep_sta ASSIGNING <ls_obj_rep_sta>.

            READ TABLE lo_bp_bupa_outbound->get_message_links( ) INTO ls_msg_link WITH KEY objkey = <ls_obj_rep_sta>-object_id. "#EC ENHOK
                                                            "#EC WARNOK
            IF sy-subrc EQ 0.
              <ls_obj_rep_sta>-msg_link  = ls_msg_link-msg_link.
              <ls_obj_rep_sta>-repstatus = if_drf_const=>replication_status_sent.
              lv_object_count = lv_object_count + 1.
            ELSEIF ms_runtime_param-return_message EQ abap_true
               AND <ls_obj_rep_sta>-repstatus NE if_drf_const=>replication_status_to_be_send.
              "in case message isn't send (message data is to be returned to DRF-controller/
              "application which requests the data without replicating objects, the message
              "link is supplied by the application and transfered as additional attribute)
              <ls_obj_rep_sta>-msg_link  = ms_runtime_param-additional_parameter-msg_link.
              <ls_obj_rep_sta>-repstatus = if_drf_const=>replication_status_sent.
            ENDIF.
          ENDLOOP.
          IF NOT lv_object_count IS INITIAL.
            ms_runtime_param-bal->add_msg_xi( EXPORTING iv_object_count = lv_object_count
                                                        iv_xi_msg_guid  = lv_xi_msg_guid
                                                        iv_outb_impl    = ms_runtime_param-outb_impl  ).
          ENDIF.

        ENDIF.

        "Send relations
        IF NOT lt_bs_bp_rel_data  IS INITIAL.

* in case of time independent target adjust validity
          IF NOT ls_mdg_bus_sys_attr IS INITIAL.
            LOOP AT lt_bs_bp_rel_data INTO ls_relation
                                      WHERE partner_relation-central_data-main-data-date_from <> '00010101'
                                      OR    partner_relation-header-object_instance-date_to   <> gc_eternal_date.
              ls_relation-partner_relation-central_data-main-data-date_from = '00010101'.
              ls_relation-partner_relation-header-object_instance-date_to = gc_eternal_date.
              MODIFY lt_bs_bp_rel_data FROM ls_relation.
            ENDLOOP.
          ENDIF.

          lo_bp_relship_outbound = get_bp_relship_outbound( ).
          IF lo_bp_relship_outbound IS BOUND.
            "Set the recipient system to support receiver-dependent code list
            "determination and value mapping
            lo_bp_relship_outbound->set_recipient( mv_receiver_bskey ).
            lo_bp_relship_outbound->set_ref_bulk_message_id( lv_bulk_message_id ).
            lo_bp_relship_outbound->set_current_state( gv_current_state ).

            "Execute service if direct send is requested (no return of message data requested)
            IF ms_runtime_param-return_message EQ abap_false.
              " Send always deletion before insert to avoid error in inbound
              SORT lt_bs_bp_rel_data BY partner_relation-header-object_task DESCENDING.
              lo_bp_relship_outbound->exec_async_out( EXPORTING api_out = REF #( lt_bs_bp_rel_data ) ).
              INSERT LINES OF lo_bp_relship_outbound->get_message_links(  ) INTO TABLE gt_msg_link.
            ENDIF.

            "Fill Object Replication Status
            CLEAR lv_object_count.
            lv_xi_msg_guid = lo_bp_relship_outbound->get_xi_msg_guid( ).

            INSERT LINES OF lo_bp_relship_outbound->get_message_links(  ) INTO TABLE lt_msg_link.
            LOOP AT ct_obj_rep_sta ASSIGNING <ls_obj_rep_sta> WHERE msg_link IS INITIAL.
              READ TABLE lo_bp_relship_outbound->get_message_links(  ) INTO ls_msg_link WITH KEY objkey = <ls_obj_rep_sta>-object_id. "#EC ENHOK
                                                            "#EC WARNOK
              IF sy-subrc EQ 0.
                <ls_obj_rep_sta>-msg_link  = ls_msg_link-msg_link.
                <ls_obj_rep_sta>-repstatus = if_drf_const=>replication_status_sent.
                lv_object_count = lv_object_count + 1.

* Note 2350887: In case of time-independent target systems the VALID_TO keydate might have been adjusted
* to 99991231, hence the msg_link-assignment fails and has to be adjusted too
              ELSEIF NOT ls_mdg_bus_sys_attr IS INITIAL.
                READ TABLE lt_msg_link INTO ls_msg_link WITH KEY objkey(26) = <ls_obj_rep_sta>-object_id(26). "#EC ENHOK
                                                            "#EC WARNOK
                IF sy-subrc EQ 0.
                  DELETE lt_msg_link INDEX sy-tabix.
                  <ls_obj_rep_sta>-msg_link  = ls_msg_link-msg_link.
                  <ls_obj_rep_sta>-repstatus = if_drf_const=>replication_status_sent.
                  lv_object_count = lv_object_count + 1.
                ENDIF.
              ENDIF.
              IF  <ls_obj_rep_sta>-repstatus <> if_drf_const=>replication_status_sent
              AND ms_runtime_param-return_message EQ abap_true.
                "in case message isn't send (message data is to be returned to DRF-controller/
                "application which requests the data without replicating objects, the message
                "link is supplied by the application and transfered as additional attribute)
                <ls_obj_rep_sta>-msg_link  = ms_runtime_param-additional_parameter-msg_link.
                <ls_obj_rep_sta>-repstatus = if_drf_const=>replication_status_sent.
              ENDIF.

            ENDLOOP.
            IF NOT lv_object_count IS INITIAL.
              ms_runtime_param-bal->add_msg_xi( EXPORTING iv_object_count = lv_object_count
                                                          iv_xi_msg_guid  = lv_xi_msg_guid
                                                          iv_outb_impl    = ms_runtime_param-outb_impl  ).
            ENDIF.
          ENDIF.
        ENDIF.

      CATCH cx_ai_system_fault INTO lx_ai_system_fault.
        raise_drf_exception( lx_ai_system_fault ).
    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method Z_CL_DRF_2_AIFAEM_BP_REPL->RAISE_DRF_EXCEPTION
* +-------------------------------------------------------------------------------------------------+
* | [--->] IR_EXCEPTION                   TYPE REF TO CX_ROOT
* | [!CX!] CX_DRF_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method RAISE_DRF_EXCEPTION.
    DATA: lr_last_exception     TYPE REF TO cx_root,
          lr_exception          TYPE REF TO cx_root,
          lv_message_text       TYPE string,
          lv_message_short_text TYPE string.

    lr_exception = ir_exception.

    DO.
      IF lr_exception->previous IS INITIAL.
        EXIT.
      ENDIF.
      lr_last_exception = lr_exception.
      lr_exception = lr_exception->previous.
    ENDDO.

    " retrieve error short text
    lv_message_short_text = lr_exception->get_text( ).

    IF lv_message_short_text IS INITIAL AND lr_last_exception IS BOUND.
      lv_message_short_text = lr_last_exception->get_text( ).
    ENDIF.

    IF lv_message_short_text IS INITIAL.
      lv_message_short_text = ir_exception->get_text( ).
    ENDIF.

    IF lv_message_short_text IS NOT INITIAL.
      ms_runtime_param-bal->add_msg_string(
        EXPORTING
          iv_msgty   = 'E' " Message Category
          iv_msgtext = lv_message_short_text
      ).
    ENDIF.

    " retrieve error long text
    lv_message_text = lr_exception->get_longtext( ).

    IF lv_message_text IS INITIAL AND lr_last_exception IS BOUND.
      lv_message_text = lr_last_exception->get_longtext( ).
    ENDIF.

    IF lv_message_text IS INITIAL.
      lv_message_text = ir_exception->get_longtext( ).
    ENDIF.

    IF lv_message_text IS NOT INITIAL AND ( lv_message_text NE lv_message_short_text ).
      ms_runtime_param-bal->add_msg_string(
        EXPORTING
          iv_msgty   = 'E' " Message Category
          iv_msgtext = lv_message_text
      ).
    ENDIF.

    RAISE EXCEPTION TYPE cx_drf_exception
      EXPORTING
        previous = ir_exception.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method Z_CL_DRF_2_AIFAEM_BP_REPL->SAME_REL_PARTNER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_RELATION                    TYPE        MDG_BS_BP_REL_S_EXTERN
* | [<-()] RV_SAME_TARGET_BP              TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method SAME_REL_PARTNER.
    "*! This method checks if the related partners point to the same partner in the client system(s)
    rv_same_target_bp = abap_false.
    get_bp_key_mapping(
      EXPORTING
        iv_partner     = is_relation-partner_relation-header-object_instance-partner1-bpartner
      IMPORTING
        es_key_mapping = DATA(ls_bp1_key_mapping) ).
    get_bp_key_mapping(
      EXPORTING
        iv_partner     = is_relation-partner_relation-header-object_instance-partner2-bpartner
      IMPORTING
        es_key_mapping = DATA(ls_bp2_key_mapping) ).

    LOOP AT ls_bp1_key_mapping-receiver_key INTO DATA(ls_bp1_receiver_key).
      IF ls_bp1_receiver_key-partner IS NOT INITIAL.
      READ TABLE ls_bp2_key_mapping-receiver_key TRANSPORTING NO FIELDS
        WITH KEY partner = ls_bp1_receiver_key-partner.
      CHECK sy-subrc = 0.
      rv_same_target_bp = abap_true.
      RETURN.
      ENDIF.
    ENDLOOP.

  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method Z_CL_DRF_2_AIFAEM_BP_REPL->ADDRESS_USAGE_NODE_FILTER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_EXTERNAL_CRITERIA           TYPE        RSDS_TRANGE
* | [--->] IV_IGNORE_FILTER               TYPE        ABAP_BOOL
* | [<-->] CT_BS_BP_EXTERN                TYPE        MDG_BS_BP_T_EXTERN
* | [!CX!] CX_DRF_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method ADDRESS_USAGE_NODE_FILTER.
     DATA: lt_address_usage                    TYPE SORTED TABLE OF MDG_BS_BP_S_TB009 WITH UNIQUE KEY ADR_KIND.
  DATA: lt_bupa_address                     TYPE bus_ei_bupa_address_t.
  DATA: lt_bupa_address_usage               TYPE BUS_EI_BUPA_ADDRESSUSAGE_t.
  DATA: mo_bp_address_usage_filter          TYPE REF TO cl_drf_filter_object.
  DATA: lx_drf_exception                    TYPE REF TO cx_drf_exception.

  FIELD-SYMBOLS: <ls_bupa_address>          TYPE bus_ei_bupa_address.
  FIELD-SYMBOLS: <ls_bupa_address_usage>    TYPE bus_ei_bupa_addressusage.
  FIELD-SYMBOLS: <ls_bs_bp_extern>          TYPE mdg_bs_bp_s_extern.


* Segement filter ADDRESS USAGE
  TRY.
       mo_bp_address_usage_filter = cl_drf_service_tools=>filter_object_factory(
              iv_appl            = ms_runtime_param-appl
              iv_business_system = ms_runtime_param-business_system
              iv_filter_object   = '98698'
              iv_outb_impl       = ms_runtime_param-outb_impl
              io_bal             = ms_runtime_param-bal
              iv_dlmod           = ms_runtime_param-dlmod
              iv_runmod          = ms_runtime_param-runmod ).

    CATCH cx_drf_exception INTO lx_drf_exception.
      RAISE EXCEPTION TYPE cx_drf_exception
        EXPORTING
          previous = lx_drf_exception.
  ENDTRY.


* Initialise DRF ADDRESS USAGE filter
  CALL METHOD mo_bp_address_usage_filter->init_objects
    EXPORTING
      iv_use_object_ref = 'X' "=> lt_address_usage is treaten as an reference
    CHANGING                  "-> apply_filter will directly update into lt_address_usage
      ct_objects        = lt_address_usage.


* Apply filter
  TRY.
      CALL METHOD mo_bp_address_usage_filter->apply_filter
        EXPORTING
          iv_outb_impl         = ms_runtime_param-outb_impl
          iv_ignore_filter     = iv_ignore_filter
          it_external_criteria = it_external_criteria.

    CATCH cx_drf_exception INTO lx_drf_exception.
      RAISE EXCEPTION TYPE cx_drf_exception
        EXPORTING
          previous = lx_drf_exception.
  ENDTRY.


* Modify CT_BS_BP_EXTERN based on filter results
  LOOP AT ct_bs_bp_extern ASSIGNING <ls_bs_bp_extern>.
    lt_bupa_address = <ls_bs_bp_extern>-partner-central_data-address-addresses.
    LOOP AT lt_bupa_address ASSIGNING <ls_bupa_address>.
      lt_bupa_address_usage = <ls_bupa_address>-data-addr_usage-addr_usages.
      LOOP AT lt_bupa_address_usage ASSIGNING <ls_bupa_address_usage>.
        READ TABLE lt_address_usage WITH KEY adr_kind = <ls_bupa_address_usage>-data_key-addresstype TRANSPORTING NO FIELDS.
        IF sy-subrc NE 0.
          DELETE lt_bupa_address_usage.
        ENDIF.
      ENDLOOP.
    <ls_bupa_address>-data-addr_usage-addr_usages = lt_bupa_address_usage.
    ENDLOOP.
    <ls_bs_bp_extern>-partner-central_data-address-addresses = lt_bupa_address.
  ENDLOOP.

  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method Z_CL_DRF_2_AIFAEM_BP_REPL->IDENTIFICATION_NODE_FILTER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_EXTERNAL_CRITERIA           TYPE        RSDS_TRANGE
* | [--->] IV_IGNORE_FILTER               TYPE        ABAP_BOOL
* | [<-->] CT_BS_BP_EXTERN                TYPE        MDG_BS_BP_T_EXTERN
* | [!CX!] CX_DRF_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method IDENTIFICATION_NODE_FILTER.

  DATA: lt_ident                   TYPE SORTED TABLE OF MDG_BS_BP_S_TB039A WITH UNIQUE KEY TYPE.
  DATA: lt_bupa_ident              TYPE BUS_EI_BUPA_IDENTIFICATION_T.
  DATA: mo_bp_ident_filter          TYPE REF TO cl_drf_filter_object.
  DATA: lx_drf_exception           TYPE REF TO cx_drf_exception.
  DATA: lt_tb039a                  TYPE STANDARD TABLE OF tb039a.
  DATA: ls_tb039a                  TYPE tb039a.

  FIELD-SYMBOLS: <ls_bupa_ident>   TYPE BUS_EI_BUPA_IDENTIFICATION.
  FIELD-SYMBOLS: <ls_bs_bp_extern> TYPE mdg_bs_bp_s_extern.


* Segement Filter von IDENTIFICATION
  TRY.

      mo_bp_ident_filter = cl_drf_service_tools=>filter_object_factory(
              iv_appl          = ms_runtime_param-appl
              iv_business_system = ms_runtime_param-business_system
              iv_filter_object = '98699'
              iv_outb_impl     = ms_runtime_param-outb_impl
              io_bal           = ms_runtime_param-bal
              iv_dlmod         = ms_runtime_param-dlmod
              iv_runmod        = ms_runtime_param-runmod ).

    CATCH cx_drf_exception INTO lx_drf_exception.
      RAISE EXCEPTION TYPE cx_drf_exception
        EXPORTING
          previous = lx_drf_exception.

  ENDTRY.

* initialise DRF IDENTIFICATION Filter
  CALL METHOD mo_bp_ident_filter->init_objects
    EXPORTING
      iv_use_object_ref = 'X' "=> lt_lt_ident is treaten as an reference
    CHANGING                  "-> apply_filter will directly update into lt_lt_ident
      ct_objects        = lt_ident.


* Apply Filter
  TRY.
      CALL METHOD mo_bp_ident_filter->apply_filter
        EXPORTING
          iv_outb_impl         = ms_runtime_param-outb_impl
          iv_ignore_filter     = iv_ignore_filter
          it_external_criteria = it_external_criteria.


    CATCH cx_drf_exception INTO lx_drf_exception.
      RAISE EXCEPTION TYPE cx_drf_exception
        EXPORTING
          previous = lx_drf_exception.

  ENDTRY.

  IF lines( ct_bs_bp_extern ) GT 0.
    CALL FUNCTION 'BUP_TB039A_SELECT_ALL'
      TABLES
        t_tb039a  = lt_tb039a
      EXCEPTIONS
        OTHERS    = 0.
  ENDIF.

* Modify CT_BP_EXTERN based on filter results
  LOOP AT ct_bs_bp_extern ASSIGNING <ls_bs_bp_extern>.
    lt_bupa_ident = <ls_bs_bp_extern>-partner-central_data-IDENT_NUMBER-IDENT_NUMBERS.
    LOOP AT lt_bupa_ident ASSIGNING <ls_bupa_ident>.
      READ TABLE lt_tb039a WITH KEY category = <ls_bupa_ident>-data_key INTO ls_tb039a.
      READ TABLE lt_ident WITH KEY type = ls_tb039a-type TRANSPORTING NO FIELDS.
      IF sy-subrc NE 0.
        DELETE lt_bupa_ident.
      ENDIF.
    ENDLOOP.
    <ls_bs_bp_extern>-partner-central_data-IDENT_NUMBER-IDENT_NUMBERS = lt_bupa_ident.
  ENDLOOP.

  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method Z_CL_DRF_2_AIFAEM_BP_REPL->ROLE_NODE_FILTER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_EXTERNAL_CRITERIA           TYPE        RSDS_TRANGE
* | [--->] IV_IGNORE_FILTER               TYPE        ABAP_BOOL
* | [<-->] CT_BS_BP_EXTERN                TYPE        MDG_BS_BP_T_EXTERN
* | [!CX!] CX_DRF_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method ROLE_NODE_FILTER.

     DATA: lt_roles                   TYPE SORTED TABLE OF mdg_bs_bp_s_tb003 WITH UNIQUE KEY role.
  DATA: lt_bupa_roles              TYPE bus_ei_bupa_roles_t.
  DATA: mo_bp_role_filter          TYPE REF TO cl_drf_filter_object.
  DATA: lx_drf_exception           TYPE REF TO cx_drf_exception.

  FIELD-SYMBOLS: <ls_bupa_roles>   TYPE bus_ei_bupa_roles.
  FIELD-SYMBOLS: <ls_bs_bp_extern> TYPE mdg_bs_bp_s_extern.


* Segement Filter von ROLE
  TRY.

      mo_bp_role_filter = cl_drf_service_tools=>filter_object_factory(
              iv_appl          = ms_runtime_param-appl
              iv_business_system = ms_runtime_param-business_system
              iv_filter_object = '98601'
              iv_outb_impl     = ms_runtime_param-outb_impl
              io_bal           = ms_runtime_param-bal
              iv_dlmod         = ms_runtime_param-dlmod
              iv_runmod        = ms_runtime_param-runmod ).

    CATCH cx_drf_exception INTO lx_drf_exception.
      RAISE EXCEPTION TYPE cx_drf_exception
        EXPORTING
          previous = lx_drf_exception.

  ENDTRY.

* initialise DRF Role Filter
  CALL METHOD mo_bp_role_filter->init_objects
    EXPORTING
      iv_use_object_ref = 'X' "=> lt_roles is treaten as an reference
    CHANGING                  "-> apply_filter will directly update into lt_roles
      ct_objects        = lt_roles.


* Apply Filter
  TRY.
      CALL METHOD mo_bp_role_filter->apply_filter
        EXPORTING
          iv_outb_impl         = ms_runtime_param-outb_impl
          iv_ignore_filter     = iv_ignore_filter
          it_external_criteria = it_external_criteria.


    CATCH cx_drf_exception INTO lx_drf_exception.
      RAISE EXCEPTION TYPE cx_drf_exception
        EXPORTING
          previous = lx_drf_exception.

  ENDTRY.



* Modify CT_BP_EXTERN based on filter results
  LOOP AT ct_bs_bp_extern ASSIGNING <ls_bs_bp_extern>.
    lt_bupa_roles = <ls_bs_bp_extern>-partner-central_data-role-roles.
    LOOP AT lt_bupa_roles ASSIGNING <ls_bupa_roles>.
      READ TABLE lt_roles WITH KEY role = <ls_bupa_roles>-data_key TRANSPORTING NO FIELDS.
      IF sy-subrc NE 0.
        DELETE lt_bupa_roles.
      ENDIF.
    ENDLOOP.
    <ls_bs_bp_extern>-partner-central_data-role-roles = lt_bupa_roles.
  ENDLOOP.

  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method Z_CL_DRF_2_AIFAEM_BP_REPL->TAXCAT_NODE_FILTER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_EXTERNAL_CRITERIA           TYPE        RSDS_TRANGE
* | [--->] IV_IGNORE_FILTER               TYPE        ABAP_BOOL
* | [<-->] CT_BS_BP_EXTERN                TYPE        MDG_BS_BP_T_EXTERN
* | [!CX!] CX_DRF_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD taxcat_node_filter.

    DATA: lt_tax_filter               TYPE SORTED TABLE OF mdg_bs_bp_s_taxcat WITH UNIQUE KEY taxtype.
    DATA: lt_tax_number              TYPE bus_ei_bupa_taxnumber_t.
    DATA: lt_tax_number_adr          TYPE bus_ei_bupa_taxnumber_adr_t.
    DATA: mo_bp_tax_cat_filter          TYPE REF TO cl_drf_filter_object.
    DATA: lx_drf_exception           TYPE REF TO cx_drf_exception.

    FIELD-SYMBOLS: <ls_bupa_tax_num>   TYPE bus_ei_bupa_taxnumber.
    FIELD-SYMBOLS: <ls_bupa_tax_num_adr>   TYPE bus_ei_bupa_taxnumber_adr.
    FIELD-SYMBOLS: <ls_bs_bp_extern> TYPE mdg_bs_bp_s_extern.


* Segement Filter tax Category
    TRY.

        mo_bp_tax_cat_filter = cl_drf_service_tools=>filter_object_factory(
                iv_appl          = ms_runtime_param-appl
                iv_business_system = ms_runtime_param-business_system
                iv_filter_object = '98700'
                iv_outb_impl     = ms_runtime_param-outb_impl
                io_bal           = ms_runtime_param-bal
                iv_dlmod         = ms_runtime_param-dlmod
                iv_runmod        = ms_runtime_param-runmod ).

      CATCH cx_drf_exception INTO lx_drf_exception.
        RAISE EXCEPTION TYPE cx_drf_exception
          EXPORTING
            previous = lx_drf_exception.

    ENDTRY.

* initialise DRF Tax Category Filter
    CALL METHOD mo_bp_tax_cat_filter->init_objects
      EXPORTING
        iv_use_object_ref = 'X' "=> lt_roles is treaten as an reference
      CHANGING                  "-> apply_filter will directly update into lt_roles
        ct_objects        = lt_tax_filter.


* Apply Filter
    TRY.
        CALL METHOD mo_bp_tax_cat_filter->apply_filter
          EXPORTING
            iv_outb_impl         = ms_runtime_param-outb_impl
            iv_ignore_filter     = iv_ignore_filter
            it_external_criteria = it_external_criteria.


      CATCH cx_drf_exception INTO lx_drf_exception.
        RAISE EXCEPTION TYPE cx_drf_exception
          EXPORTING
            previous = lx_drf_exception.

    ENDTRY.


* Modify CT_BP_EXTERN based on filter results
    LOOP AT ct_bs_bp_extern ASSIGNING <ls_bs_bp_extern>.
      lt_tax_number = <ls_bs_bp_extern>-partner-central_data-taxnumber-taxnumbers.
      LOOP AT lt_tax_number ASSIGNING <ls_bupa_tax_num>.
        READ TABLE lt_tax_filter WITH KEY taxtype = <ls_bupa_tax_num>-data_key-taxtype TRANSPORTING NO FIELDS.
        IF sy-subrc NE 0.
          DELETE lt_tax_number.
        ENDIF.
      ENDLOOP.
      <ls_bs_bp_extern>-partner-central_data-taxnumber-taxnumbers = lt_tax_number.

      IF cl_bupa_multiple_addresses=>if_bupa_multiple_addresses~is_taxnum_multiple_addr_active(  ) = abap_true.
        lt_tax_number_adr = <ls_bs_bp_extern>-partner-central_data-taxnumber_adr-taxnumbers_adr.
        LOOP AT lt_tax_number_adr ASSIGNING <ls_bupa_tax_num_adr>.
          READ TABLE lt_tax_filter WITH KEY taxtype = <ls_bupa_tax_num_adr>-data_key-taxtype TRANSPORTING NO FIELDS.
          IF sy-subrc NE 0.
            DELETE lt_tax_number_adr.
          ENDIF.
        ENDLOOP.
        <ls_bs_bp_extern>-partner-central_data-taxnumber_adr-taxnumbers_adr = lt_tax_number_adr.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.
ENDCLASS.
